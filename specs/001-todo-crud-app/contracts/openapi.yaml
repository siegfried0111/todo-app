openapi: 3.1.0
info:
  title: Todo App API
  version: 1.0.0
  description: |
    REST API for Todo CRUD application.

    Features:
    - Create, read, update, delete todos
    - Mark todos as completed/in-progress
    - View all todos sorted by creation time

    All timestamps are in ISO 8601 format with timezone.
  contact:
    name: API Support
  license:
    name: MIT

servers:
  - url: http://localhost:8000/api
    description: Local development server
  - url: https://api.todoapp.example.com
    description: Production server (example)

tags:
  - name: todos
    description: Todo CRUD operations

paths:
  /todos:
    get:
      summary: List all todos
      description: |
        Returns all todos sorted by creation time (newest first).
        Todos are returned with their completion status.
      operationId: listTodos
      tags:
        - todos
      parameters:
        - name: is_completed
          in: query
          description: Filter by completion status
          required: false
          schema:
            type: boolean
            example: false
        - name: limit
          in: query
          description: Maximum number of todos to return
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 1000
            default: 1000
        - name: offset
          in: query
          description: Number of todos to skip (pagination)
          required: false
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TodoListResponse'
              examples:
                mixed:
                  summary: Mixed completed and in-progress todos
                  value:
                    todos:
                      - id: 1
                        title: "Buy groceries"
                        content: "Milk, eggs, bread"
                        created_at: "2025-10-30T10:00:00Z"
                        completed_at: null
                        is_completed: false
                      - id: 2
                        title: "Finish report"
                        content: "Complete sections 3-5"
                        created_at: "2025-10-29T15:30:00Z"
                        completed_at: "2025-10-30T09:00:00Z"
                        is_completed: true
                    total: 2
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      summary: Create a new todo
      description: |
        Creates a new todo with the provided title and content.
        CreatedAt timestamp is automatically set to current time.
      operationId: createTodo
      tags:
        - todos
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TodoCreate'
            examples:
              full:
                summary: Todo with title and content
                value:
                  title: "Buy groceries"
                  content: "Milk, eggs, bread"
              title_only:
                summary: Todo with title only
                value:
                  title: "Call dentist"
      responses:
        '201':
          description: Todo created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TodoResponse'
              example:
                id: 1
                title: "Buy groceries"
                content: "Milk, eggs, bread"
                created_at: "2025-10-30T10:00:00Z"
                completed_at: null
                is_completed: false
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /todos/{todo_id}:
    get:
      summary: Get a todo by ID
      description: Returns a single todo by its ID
      operationId: getTodo
      tags:
        - todos
      parameters:
        - $ref: '#/components/parameters/TodoId'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TodoResponse'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    patch:
      summary: Update a todo
      description: |
        Updates title and/or content of an existing todo.
        Preserves CreatedAt, CompletedAt, and IsCompleted.
        To change completion status, use the complete endpoint.
      operationId: updateTodo
      tags:
        - todos
      parameters:
        - $ref: '#/components/parameters/TodoId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TodoUpdate'
            examples:
              update_title:
                summary: Update title only
                value:
                  title: "Buy groceries and supplies"
              update_both:
                summary: Update title and content
                value:
                  title: "Buy groceries and supplies"
                  content: "Milk, eggs, bread, paper towels"
      responses:
        '200':
          description: Todo updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TodoResponse'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      summary: Delete a todo
      description: |
        Permanently deletes a todo by its ID.
        This operation is irreversible.
        Frontend MUST show confirmation dialog requiring "DELETE" input.
      operationId: deleteTodo
      tags:
        - todos
      parameters:
        - $ref: '#/components/parameters/TodoId'
      responses:
        '204':
          description: Todo deleted successfully (no content)
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /todos/{todo_id}/complete:
    patch:
      summary: Complete or uncomplete a todo
      description: |
        Marks a todo as completed (sets CompletedAt to current time) or
        reverts it to in-progress (clears CompletedAt).

        Operation is idempotent:
        - Completing an already-completed todo has no effect
        - Uncompleting an already in-progress todo has no effect
      operationId: completeTodo
      tags:
        - todos
      parameters:
        - $ref: '#/components/parameters/TodoId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TodoComplete'
            examples:
              complete:
                summary: Mark as completed
                value:
                  is_completed: true
              uncomplete:
                summary: Revert to in-progress
                value:
                  is_completed: false
      responses:
        '200':
          description: Todo status updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TodoResponse'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  parameters:
    TodoId:
      name: todo_id
      in: path
      description: Todo ID
      required: true
      schema:
        type: integer
        format: int64
        minimum: 1
      example: 1

  schemas:
    TodoCreate:
      type: object
      required:
        - title
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 200
          description: Todo title (required, cannot be only whitespace)
          example: "Buy groceries"
        content:
          type: string
          maxLength: 10000
          default: ""
          description: Todo content (optional, can be empty)
          example: "Milk, eggs, bread"

    TodoUpdate:
      type: object
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 200
          description: Updated title (optional, cannot be only whitespace)
          example: "Buy groceries and supplies"
        content:
          type: string
          maxLength: 10000
          description: Updated content (optional)
          example: "Milk, eggs, bread, paper towels"

    TodoComplete:
      type: object
      required:
        - is_completed
      properties:
        is_completed:
          type: boolean
          description: True to mark as completed, false to revert to in-progress
          example: true

    TodoResponse:
      type: object
      required:
        - id
        - title
        - content
        - created_at
        - is_completed
      properties:
        id:
          type: integer
          format: int64
          description: Todo ID
          example: 1
        title:
          type: string
          description: Todo title
          example: "Buy groceries"
        content:
          type: string
          description: Todo content
          example: "Milk, eggs, bread"
        created_at:
          type: string
          format: date-time
          description: When todo was created (ISO 8601)
          example: "2025-10-30T10:00:00Z"
        completed_at:
          type: string
          format: date-time
          nullable: true
          description: When todo was completed (ISO 8601), null if in-progress
          example: "2025-10-30T15:30:00Z"
        is_completed:
          type: boolean
          description: Whether todo is completed
          example: false

    TodoListResponse:
      type: object
      required:
        - todos
        - total
      properties:
        todos:
          type: array
          items:
            $ref: '#/components/schemas/TodoResponse'
          description: List of todos
        total:
          type: integer
          description: Total number of todos
          example: 42

    ErrorResponse:
      type: object
      required:
        - detail
      properties:
        detail:
          type: string
          description: Error message
          example: "Todo not found"

    ValidationErrorResponse:
      type: object
      required:
        - detail
      properties:
        detail:
          type: array
          items:
            type: object
            properties:
              loc:
                type: array
                items:
                  type: string
                description: Location of the error (field path)
                example: ["body", "title"]
              msg:
                type: string
                description: Error message
                example: "String should have at least 1 character"
              type:
                type: string
                description: Error type
                example: "string_too_short"

  responses:
    NotFound:
      description: Todo not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            detail: "Todo with ID 123 not found"

    ValidationError:
      description: Validation error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ValidationErrorResponse'
          examples:
            empty_title:
              summary: Title is empty
              value:
                detail:
                  - loc: ["body", "title"]
                    msg: "String should have at least 1 character"
                    type: "string_too_short"
            title_too_long:
              summary: Title exceeds maximum length
              value:
                detail:
                  - loc: ["body", "title"]
                    msg: "String should have at most 200 characters"
                    type: "string_too_long"
            whitespace_only:
              summary: Title is only whitespace
              value:
                detail:
                  - loc: ["body", "title"]
                    msg: "Title cannot be only whitespace"
                    type: "value_error"

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            detail: "An unexpected error occurred"

  securitySchemes: {}

security: []
